from ast import parse
from loguru import logger
from time import strftime, sleep

import telebot
import os
import re
from qu import SmartSender

class CommendantTime:
    def __init__(self, queue: SmartSender) -> None:
        self.TIMEOUT = 0.65
        self.START_STOP_TRIGGER = False
        self.BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
        self.BOT_CHAT_ID = os.getenv("CHAT_ID")
        self.TIME_START = os.getenv("TIME_COMMENDANT_START")
        self.TIME_END = os.getenv("TIME_COMMENDANT_END")
        self.bot = telebot.TeleBot(self.BOT_TOKEN)
        self.log_filename_format = 'comendant_{time}.log'
        self.message_start = f'‚ùóÔ∏è‚ùóÔ∏è–£–≤–∞–≥–∞ ‚ùóÔ∏è‚ùóÔ∏è –ü–û–ß–ê–¢–û–ö ({self.TIME_START}) –ö–û–ú–ï–ù–î–ê–ù–¢–°–¨–ö–û–á –ì–û–î–ò–ù–ò‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è'
        self.message_end = f'‚ùóÔ∏è‚ùóÔ∏è–ö–Ü–ù–ï–¶–¨ ({self.TIME_END}) –ö–û–ú–ï–ù–î–ê–ù–¢–°–¨–ö–û–á –ì–û–î–ò–ù–òüòÄüòÄ'
        self._work = True
        self.caption_video = '''üòî–©–æ—Ä–∞–Ω–∫—É –≤—à–∞–Ω–æ–≤—É—î–º–æ —Ö–≤–∏–ª–∏–Ω–æ—é –º–æ–≤—á–∞–Ω–Ω—è –ø–∞–º‚Äô—è—Ç—å –∑–∞–≥–∏–±–ª–∏—Ö.

–ú–∏ –ø–∞–º‚Äô—è—Ç–∞—î–º–æ –≤–æ—ó–Ω—ñ–≤, –ø–æ–ª–µ–≥–ª–∏—Ö –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±–æ–π–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å —ñ–∑ –∑–∞—Ö–∏—Å—Ç—É –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ —Å—É–≤–µ—Ä–µ–Ω—ñ—Ç–µ—Ç—É —Ç–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–æ—ó —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏, –º–∏—Ä–Ω–∏—Ö –≥—Ä–æ–º–∞–¥—è–Ω, —è–∫—ñ –∑–∞–≥–∏–Ω—É–ª–∏ —É–Ω–∞—Å–ª—ñ–¥–æ–∫ –∑–±—Ä–æ–π–Ω–æ—ó –∞–≥—Ä–µ—Å—ñ—ó —Ä–∞—à–∏—Å—Ç—ñ–≤ –ø—Ä–æ—Ç–∏ –£–∫—Ä–∞—ó–Ω–∏üôè'''
        self.file_video = os.path.join(os.path.dirname(__file__), 'minute_mute.mp4')
        self.send_video_time = "09:00"
        self.queue = queue

    def set_sender(self, sender_helper):
        self.send_method = sender_helper



    def is_valid_format_time(self, time: str) -> bool:
        return bool( re.search(r'^\d\d\:\d\d$',  time) )


    def input_times(self):
        # self.TIME_START = input("–ß–∞—Å –ø–æ—á–∞—Ç–∫—É –∫–æ–º–µ–Ω–¥–∞–Ω—Ç—Å—å–∫–æ—ó –≥–æ–¥–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 23:00): ")
        # self.TIME_END = input("–ß–∞—Å –∫—ñ–Ω—Ü—è –∫–æ–º–µ–Ω–¥–∞–Ω—Ç—Å—å–∫–æ—ó –≥–æ–¥–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 05:00): ")
        if not( self.is_valid_format_time(self.TIME_START) ) :
            logger.error("–ü–æ–º–∏–ª–∫–æ–≤–æ –≤–≤–µ–¥–µ–Ω–∏–π —á–∞—Å –ø–æ—á–∞—Ç–∫—É –∫–æ–º–µ–Ω–¥–∞—Ç—Å—å–∫–æ—ó –≥–æ–¥–∏–Ω–∏, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É.")
            self.input_times()
        if not( self.is_valid_format_time(self.TIME_END) ) :
            logger.error("–ü–æ–º–∏–ª–∫–æ–≤–æ –≤–≤–µ–¥–µ–Ω–∏–π —á–∞—Å –∫—ñ–Ω—Ü—è –∫–æ–º–µ–Ω–¥–∞—Ç—Å—å–∫–æ—ó –≥–æ–¥–∏–Ω–∏, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É.")
            self.input_times()
        logger.info(f" –ß–∞—Å –ø–æ—á–∞—Ç–∫—É {self.TIME_START}, –∫—ñ–Ω—Ü—è {self.TIME_END} ")


    def parse_time(self):
        self.input_times()
        time = {}
        time['startH'] = int( self.TIME_START.split(":")[0] )
        time['startM'] = int( self.TIME_START.split(":")[1] )
        time['stopH'] = int( self.TIME_END.split(":")[0] )
        time['stopM'] = int( self.TIME_END.split(":")[1] )
        return time


    def send_message(self, text: str):
        self.queue.send('text', text)


    def is_start_time(self, time_data: dict) -> bool:
        if strftime('%H:%M:%S') == self.TIME_START + ':00':
            return True
        return False
        # h = int( strftime("%H") )
        # m = int( strftime("%M") )
        # if time_data['startH'] == h and time_data['startM'] == m and not( self.START_STOP_TRIGGER ):
        #     self.START_STOP_TRIGGER = True
        #     return True
        # return False


    def is_stop_time(self, time_data: dict) -> bool:
        if strftime('%H:%M:%S') == self.TIME_END + ':00':
            return True
        return False
        # h = int( strftime("%H") )
        # m = int( strftime("%M") )
        # if time_data['stopH'] == h and time_data['stopM'] == m and  self.START_STOP_TRIGGER:
        #     self.START_STOP_TRIGGER = False
        #     return True
        # return False

    def send_video(self) -> None:
        if strftime('%H:%M:%S') == self.send_video_time + ':00':
            logger.info(f'–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–µ–æ —Ö–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è {self.file_video}')
            # self.bot.send_video(self.BOT_CHAT_ID, open(self.file_video, 'rb'), caption=self.caption_video)
            self.queue.send('video', self.caption_video, self.file_video)
            logger.info('–í—ñ–¥–µ–æ —Ö–≤–∏–ª–∏–Ω–∏ –º–æ–≤—á–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.')


    def save_log_file(self):
        root_dir = os.path.dirname(__file__)
        logs_dir = os.path.join(root_dir, 'logs')
        if not os.path.isdir(logs_dir) :
            os.mkdir(logs_dir)
        file_path_log = os.path.join(logs_dir, self.log_filename_format)
        logger.add(file_path_log)


    def run(self):
        self._work = True


    def terminate(self):
        self._work = False


    def loop(self):
        self.save_log_file()
        logger.info("–°—Ç–∞—Ä—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –∫–æ–º–µ–Ω–¥–∞—Ç—Å—å–∫—É –≥–æ–¥–∏–Ω—É")
        time = self.parse_time()
        while True:
            if not self._work:
                logger.info('–ü—Ä–æ—Ü–µ—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –∫–æ–º. –≥–æ–¥–∏–Ω—É –∑—É–ø–∏–Ω–µ–Ω–æ!')
                break
            if self.is_start_time(time):
                self.send_message(self.message_start)
                logger.info(self.message_start)
            if self.is_stop_time(time):
                self.send_message(self.message_end)
                logger.info(self.message_end)
            self.send_video()
            sleep(self.TIMEOUT)



if __name__ == "__main__":
    
    ct = CommendantTime()
    ct.loop()